{:package "app",
 :root {:ns "main", :def "main!"},
 :files {"comp.profile" {:ns ["ns"
                              "app.comp.profile"
                              [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div" "a"]]]
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "app.schema" ":as" "schema"]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo-ui.style.colors" ":as" "colors"]
                               ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                               ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]]],
                         :defs {"on-log-out" ["defn"
                                              "on-log-out"
                                              ["e" "dispatch!"]
                                              ["dispatch!" ":user/log-out" "nil"]
                                              [".removeItem" "js/localStorage" [":storage-key" "schema/configs"]]],
                                "comp-profile" ["defcomp"
                                                "comp-profile"
                                                ["user"]
                                                ["div"
                                                 ["{}" [":style" "ui/flex"]]
                                                 ["<>" "span" ["str" "|Hello! " [":name" "user"]] "nil"]
                                                 ["=<" "8" "nil"]
                                                 ["a"
                                                  ["{}"
                                                   [":style" "style-trigger"]
                                                   [":on" ["{}" [":click" "on-log-out"]]]]
                                                  ["<>" "span" "|Log out" "nil"]]]],
                                "style-trigger" ["def"
                                                 "style-trigger"
                                                 ["{}"
                                                  [":font-size" "14"]
                                                  [":cursor" ":pointer"]
                                                  [":background-color" "colors/motif-light"]
                                                  [":color" ":white"]
                                                  [":padding" "|0 8px"]]]},
                         :procs []},
         "comp.tree" {:ns ["ns"
                           "app.comp.tree"
                           [":require-macros"
                            ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div" "a" "button"]]]
                           [":require"
                            ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                            ["[]" "respo-ui.style" ":as" "ui"]
                            ["[]" "respo-ui.style.colors" ":as" "colors"]
                            ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                            ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                            ["[]" "app.style.layout" ":as" "layout"]
                            ["[]" "app.style" ":as" "style"]]],
                      :defs {"comp-tree" ["defcomp"
                                          "comp-tree"
                                          ["node-tree" "base-path" "focus-path"]
                                          ["if"
                                           ["=" ":dom-module" [":type" "node-tree"]]
                                           ["div"
                                            ["{}"]
                                            ["div"
                                             ["{}"
                                              [":style"
                                               ["merge"
                                                "style-module-name"
                                                ["if" ["=" "base-path" "focus-path"] "style-focus"]]]
                                              [":on" ["{}" [":click" ["on-focus" "base-path"]]]]]
                                             ["<>" "span" [":name" "node-tree"] "nil"]]
                                            ["div"
                                             ["{}" [":style" "style-children"]]
                                             ["comp-tree"
                                              [":tree" "node-tree"]
                                              ["[]" [":id" "node-tree"] ":tree"]
                                              "focus-path"]]]
                                           ["div"
                                            ["{}"]
                                            ["div"
                                             ["{}"]
                                             ["div"
                                              ["{}"
                                               [":style"
                                                ["merge"
                                                 "style-element-name"
                                                 ["if" ["=" "base-path" "focus-path"] "style-focus"]]]
                                               [":on" ["{}" [":click" ["on-focus" "base-path"]]]]]
                                              ["<>" "span" [":name" "node-tree"] "nil"]]]
                                            ["div"
                                             ["{}" [":style" "style-children"]]
                                             ["->>"
                                              [":children" "node-tree"]
                                              ["map-indexed"
                                               ["fn"
                                                ["idx" "child"]
                                                ["[]"
                                                 "idx"
                                                 ["comp-tree" "child" ["conj" "base-path" "idx"] "focus-path"]]]]]]]]],
                             "style-module-name" ["def"
                                                  "style-module-name"
                                                  ["{}"
                                                   [":background-color" ["hsl" "60" "80" "80"]]
                                                   [":display" ":inline-block"]
                                                   [":padding" "|0 8px"]
                                                   [":cursor" ":pointer"]]],
                             "style-children" ["def"
                                               "style-children"
                                               ["{}"
                                                [":padding-left" "16"]
                                                [":border-left" ["str" "|1px solid " ["hsl" "0" "0" "90"]]]]],
                             "style-element-name" ["def"
                                                   "style-element-name"
                                                   ["{}"
                                                    [":background-color" ["hsl" "260" "80" "50"]]
                                                    [":padding" "|0 8px"]
                                                    [":display" ":inline-block"]
                                                    [":cursor" ":pointer"]
                                                    [":color" ":white"]
                                                    [":line-height" "|1.5em"]
                                                    [":font-size" "12"]]],
                             "on-focus" ["defn"
                                         "on-focus"
                                         ["path"]
                                         ["fn" ["e" "d!" "m!"] ["d!" ":dom-modules/focus" "path"]]],
                             "style-focus" ["def" "style-focus" ["{}" [":outline" "|4px solid red"] [":z-index" "99"]]]},
                      :procs []},
         "comp.preview" {:ns ["ns"
                              "app.comp.preview"
                              [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div" "a"]]]
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo-ui.style.colors" ":as" "colors"]
                               ["[]" "respo.core" ":refer" ["[]" "create-comp" "create-element"]]
                               ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                               ["[]" "app.style.layout" ":as" "layout"]]],
                         :defs {"comp-preview" ["defcomp"
                                                "comp-preview"
                                                ["tree" "dom-modules" "path"]
                                                ["div"
                                                 ["{}" [":style" ["merge" "ui/center" "ui/fullscreen" "style-preview"]]]
                                                 ["div"
                                                  ["{}" [":style" "style-close"] [":on" ["{}" [":click" "on-close"]]]]
                                                  ["<>" "span" "|Close" "nil"]]
                                                 ["if"
                                                  ["some?" "tree"]
                                                  ["render-element"
                                                   [":tree" "tree"]
                                                   "path"
                                                   "dom-modules"
                                                   ["[]" ["first" "path"] ":tree"]
                                                   "0"]
                                                  ["<>" "span" "|nothing" "nil"]]]],
                                "style-preview" ["def"
                                                 "style-preview"
                                                 ["merge"
                                                  ["{}"
                                                   [":background-color" ["hsl" "0" "0" "90"]]
                                                   [":color" "colors/texture"]
                                                   [":overflow" ":auto"]]]],
                                "render-element" ["defn"
                                                  "render-element"
                                                  ["tree" "focused-path" "dom-modules" "path" "level"]
                                                  ["if"
                                                   ["and" ["some?" "tree"] ["<" "level" "20"]]
                                                   ["if"
                                                    ["=" ":dom-module" [":type" "tree"]]
                                                    ["let"
                                                     [["nested-module" ["get" "dom-modules" [":id" "tree"]]]]
                                                     ["println" "|get modules" "nested-module"]
                                                     ["recur"
                                                      [":tree" "nested-module"]
                                                      "focused-path"
                                                      "dom-modules"
                                                      ["[]" [":id" "tree"] ":tree"]
                                                      ["inc" "level"]]]
                                                    ["create-element"
                                                     [":name" "tree"]
                                                     ["merge"
                                                      [":props" "tree"]
                                                      ["{}"
                                                       [":style"
                                                        ["merge"
                                                         [":style" "tree"]
                                                         ["if"
                                                          ["=" "focused-path" "path"]
                                                          ["{}" [":outline" "|4px solid blue"]]]]]]]
                                                     ["->>"
                                                      [":children" "tree"]
                                                      ["map-indexed"
                                                       ["fn"
                                                        ["idx" "child"]
                                                        ["[]"
                                                         "idx"
                                                         ["render-element"
                                                          "child"
                                                          "focused-path"
                                                          "dom-modules"
                                                          ["conj" "path" "idx"]
                                                          ["inc" "level"]]]]]]]]
                                                   "nil"]],
                                "style-close" ["def"
                                               "style-close"
                                               ["{}"
                                                [":position" ":fixed"]
                                                [":top" "8"]
                                                [":right" "8"]
                                                [":z-index" "999"]
                                                [":font-size" "12"]
                                                [":font-family" "|Josefin Sans"]
                                                [":cursor" ":pointer"]
                                                [":color" ["hsl" "0" "0" "20" "0.5"]]]],
                                "on-close" ["defn"
                                            "on-close"
                                            ["e" "d!" "m!"]
                                            ["d!" ":router/change" ["{}" [":name" ":home"] [":data" "nil"]]]]},
                         :procs []},
         "schema" {:ns ["ns" "app.schema"],
                   :defs {"configs" ["def" "configs" ["{}" [":storage-key" "|workflow-storage"] [":port" "5021"]]]},
                   :procs []},
         "comp.editor" {:ns ["ns"
                             "app.comp.editor"
                             [":require-macros"
                              ["[]" "respo.macros" ":refer" ["[]" "defcomp" "cursor->" "<>" "span" "div" "a"]]]
                             [":require"
                              ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                              ["[]" "app.schema" ":as" "schema"]
                              ["[]" "respo-ui.style" ":as" "ui"]
                              ["[]" "respo-ui.style.colors" ":as" "colors"]
                              ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                              ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                              ["[]" "app.style.layout" ":as" "layout"]
                              ["[]" "app.comp.tree-panel" ":refer" ["[]" "comp-tree-panel"]]
                              ["[]" "app.comp.props" ":refer" ["[]" "comp-props"]]
                              ["[]" "app.comp.style" ":refer" ["[]" "comp-style"]]
                              ["[]" "app.comp.dom-modules" ":refer" ["[]" "comp-dom-modules"]]]],
                        :defs {"comp-editor" ["defcomp"
                                              "comp-editor"
                                              ["states" "dom-modules" "focus"]
                                              ["let"
                                               [["path" [":path" "focus"]]
                                                ["module-id" [":module" "focus"]]
                                                ["dom-module" ["get" "dom-modules" "module-id"]]
                                                ["element"
                                                 ["case"
                                                  ["count" "path"]
                                                  ["1" "nil"]
                                                  ["2" [":tree" "dom-module"]]
                                                  ["get-in"
                                                   [":tree" "dom-module"]
                                                   ["mapcat" ["fn" ["x"] ["[]" ":children" "x"]] ["drop" "2" "path"]]]]]]
                                               ["div"
                                                ["{}" [":style" "style-editor"]]
                                                ["cursor->"
                                                 ":modules"
                                                 "comp-dom-modules"
                                                 "states"
                                                 "dom-modules"
                                                 "focus"]
                                                ["cursor->" ":tree" "comp-tree-panel" "states" "dom-modules" "focus"]
                                                ["cursor->"
                                                 ":props"
                                                 "comp-props"
                                                 "states"
                                                 [":props" "element"]
                                                 [":path" "focus"]]
                                                ["cursor->"
                                                 ":style"
                                                 "comp-style"
                                                 "states"
                                                 [":style" "element"]
                                                 [":path" "focus"]]]]],
                               "style-editor" ["def"
                                               "style-editor"
                                               ["merge" [":grid" "layout/editor"] ["{}" [":padding" "|0 16px"]]]]},
                        :procs []},
         "comp.props" {:ns ["ns"
                            "app.comp.props"
                            [":require-macros"
                             ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div" "a" "input"]]]
                            [":require"
                             ["[]" "clojure.string" ":as" "string"]
                             ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                             ["[]" "respo-ui.style" ":as" "ui"]
                             ["[]" "respo-ui.style.colors" ":as" "colors"]
                             ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                             ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                             ["[]" "app.style.layout" ":as" "layout"]]],
                       :defs {"comp-props" ["defcomp"
                                            "comp-props"
                                            ["states" "props" "path"]
                                            ["let"
                                             [["state" ["or" [":data" "states"] "|"]]]
                                             ["div"
                                              ["{}" [":style" [":props" "layout/editor"]]]
                                              ["div"
                                               ["{}"]
                                               ["->>"
                                                "props"
                                                ["map"
                                                 ["fn"
                                                  ["entry"]
                                                  ["let"
                                                   [[["[]" "k" "v"] "entry"]]
                                                   ["[]"
                                                    "k"
                                                    ["div"
                                                     ["{}"]
                                                     ["<>" "span" ["str" ["name" "k"] "|:"] "nil"]
                                                     ["=<" "8" "nil"]
                                                     ["<>" "span" "v" "nil"]]]]]]]]
                                              ["div"
                                               ["{}"]
                                               ["input"
                                                ["{}"
                                                 [":placeholder" "|key: value"]
                                                 [":value" "state"]
                                                 [":style" "ui/input"]
                                                 [":on"
                                                  ["{}" [":input" "on-input"] [":keydown" ["on-keydown" "state"]]]]]]]]]],
                              "on-input" ["defn" "on-input" ["e" "d!" "m!"] ["m!" [":value" "e"]]],
                              "on-keydown" ["defn"
                                            "on-keydown"
                                            ["text"]
                                            ["fn"
                                             ["e" "d!" "m!"]
                                             ["if"
                                              ["and" ["=" "13" [":key-code" "e"]] ["not" ["string/blank?" "text"]]]
                                              ["let"
                                               [[["[]" "k" "v"]
                                                 ["map" "string/trim" ["string/split" "text" ["re-pattern" "|:\\s?"]]]]]
                                               ["d!"
                                                ":dom-modules/set-prop"
                                                ["{}"
                                                 [":prop" ["keyword" "k"]]
                                                 [":value" ["if" ["string/blank?" "v"] "nil" "v"]]]]
                                               ["m!" "|"]]]]]},
                       :procs []},
         "comp.container" {:ns ["ns"
                                "app.comp.container"
                                [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "div" "span"]]]
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo-ui.style.colors" ":as" "colors"]
                                 ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                 ["[]" "respo.comp.inspect" ":refer" ["[]" "comp-inspect"]]
                                 ["[]" "app.comp.header" ":refer" ["[]" "comp-header"]]
                                 ["[]" "app.comp.profile" ":refer" ["[]" "comp-profile"]]
                                 ["[]" "app.comp.login" ":refer" ["[]" "comp-login"]]
                                 ["[]" "respo-message.comp.msg-list" ":refer" ["[]" "comp-msg-list"]]
                                 ["[]" "app.style.layout" ":as" "layout"]
                                 ["[]" "app.comp.editor" ":refer" ["[]" "comp-editor"]]
                                 ["[]" "app.comp.preview" ":refer" ["[]" "comp-preview"]]]],
                           :defs {"style-alert" ["def"
                                                 "style-alert"
                                                 ["{}"
                                                  [":font-family" "|Josefin Sans"]
                                                  [":font-weight" "100"]
                                                  [":font-size" "40"]]],
                                  "comp-container" ["defcomp"
                                                    "comp-container"
                                                    ["states" "store"]
                                                    ["let"
                                                     [["state" [":data" "states"]]
                                                      ["session" [":session" "store"]]
                                                      ["dom-modules" [":dom-modules" "store"]]]
                                                     ["if"
                                                      ["nil?" "store"]
                                                      ["div"
                                                       ["{}"
                                                        [":style" ["merge" "ui/global" "ui/fullscreen" "ui/center"]]]
                                                       ["<>" "span" "|No connection!" "style-alert"]]
                                                      ["if"
                                                       ["=" ":preview" ["get-in" "store" ["[]" ":router" ":name"]]]
                                                       ["let"
                                                        [["module-id" ["get-in" "session" ["[]" ":focus" ":module"]]]
                                                         ["dom-module" ["get" "dom-modules" "module-id"]]]
                                                        ["comp-preview"
                                                         "dom-module"
                                                         "dom-modules"
                                                         ["->" "session" ":session" ":path"]]]
                                                       ["div"
                                                        ["{}"
                                                         [":style"
                                                          ["merge" "ui/global" "ui/fullscreen" "style-contaier"]]]
                                                        ["comp-header" [":logged-in?" "store"]]
                                                        ["if"
                                                         [":logged-in?" "store"]
                                                         ["let"
                                                          [["router" [":router" "store"]]]
                                                          ["case"
                                                           [":name" "router"]
                                                           [":home"
                                                            ["comp-editor" "states" "dom-modules" [":focus" "session"]]]
                                                           [":profile" ["comp-profile" [":user" "store"]]]
                                                           ["div"
                                                            ["{}"]
                                                            ["<>"
                                                             "span"
                                                             ["str" "|404 page: " ["pr-str" "router"]]
                                                             "nil"]]]]
                                                         ["comp-login" "states"]]
                                                        ["comp-inspect" "|Store" "store" "style-debugger"]
                                                        ["comp-msg-list"
                                                         ["get-in" "store" ["[]" ":session" ":notifications"]]
                                                         ":session/remove-notification"]]]]]],
                                  "style-debugger" ["def"
                                                    "style-debugger"
                                                    ["{}" [":bottom" "0"] [":left" "0"] [":max-width" "|100%"]]],
                                  "style-contaier" ["def"
                                                    "style-contaier"
                                                    ["merge" [":grid" "layout/workspace"] ["{}"]]]},
                           :procs []},
         "style" {:ns ["ns" "app.style" [":require" ["[]" "respo-ui.style" ":as" "ui"]]],
                  :defs {"tiny-button" ["def"
                                        "tiny-button"
                                        ["merge"
                                         "ui/button"
                                         ["{}"
                                          [":font-size" "12"]
                                          [":line-height" "1.4"]
                                          [":padding" "|0 8px"]
                                          [":min-width" "40"]]]]},
                  :procs []},
         "main" {:ns ["ns"
                      "app.main"
                      [":require"
                       ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "realize-ssr!"]]
                       ["[]" "respo.cursor" ":refer" ["[]" "mutate"]]
                       ["[]" "app.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "app.network" ":refer" ["[]" "send!" "setup-socket!"]]
                       ["[]" "app.schema" ":as" "schema"]]],
                 :defs {"ssr?" ["def" "ssr?" ["some?" [".querySelector" "js/document" "|meta.respo-ssr"]]],
                        "dispatch!" ["defn"
                                     "dispatch!"
                                     ["op" "op-data"]
                                     [".info" "js/console" "|Dispatch" ["str" "op"] ["clj->js" "op-data"]]
                                     ["if"
                                      ["=" "op" ":states"]
                                      ["let"
                                       [["new-states" [["mutate" "op-data"] "@*states"]]]
                                       ["--" "println" "|states:" "new-states"]
                                       ["reset!" "*states" "new-states"]
                                       ["--" "swap!" "*states" ["mutate" "op-data"]]]
                                      ["send!" "op" "op-data"]]],
                        "*store" ["defonce" "*store" ["atom" "nil"]],
                        "main!" ["defn"
                                 "main!"
                                 []
                                 ["if" "ssr?" ["render-app!" "realize-ssr!"]]
                                 ["render-app!" "render!"]
                                 ["setup-socket!"
                                  "*store"
                                  ["{}"
                                   [":url"
                                    ["str" "|ws://" [".-hostname" "js/location"] "|:" [":port" "schema/configs"]]]
                                   [":on-close!"
                                    ["fn"
                                     ["event"]
                                     ["reset!" "*store" "nil"]
                                     [".error" "js/console" "|Lost connection!"]]]
                                   [":on-open!" ["fn" ["event"] ["simulate-login!"]]]]]
                                 ["add-watch" "*store" ":changes" ["fn" [] ["render-app!" "render!"]]]
                                 ["add-watch" "*states" ":changes" ["fn" [] ["render-app!" "render!"]]]
                                 ["println" "|App started!"]],
                        "*states" ["defonce" "*states" ["atom" ["{}"]]],
                        "simulate-login!" ["defn"
                                           "simulate-login!"
                                           []
                                           ["let"
                                            [["raw" [".getItem" "js/localStorage" [":storage-key" "schema/configs"]]]]
                                            ["if"
                                             ["some?" "raw"]
                                             ["do"
                                              ["println" "|Found storage."]
                                              ["dispatch!" ":user/log-in" ["read-string" "raw"]]]
                                             ["do" ["println" "|Found no storage."]]]]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       ["renderer"]
                                       ["renderer" "mount-target" ["comp-container" "@*states" "@*store"] "dispatch!"]],
                        "reload!" ["defn"
                                   "reload!"
                                   []
                                   ["clear-cache!"]
                                   ["render-app!" "render!"]
                                   ["println" "|Code updated."]],
                        "mount-target" ["def" "mount-target" [".querySelector" "js/document" "|.app"]]},
                 :procs [["set!" "js/window.onload" "main!"]]},
         "network" {:ns ["ns"
                         "app.network"
                         [":require-macros" ["[]" "cljs.core.async.macros" ":refer" ["[]" "go"]]]
                         [":require"
                          ["[]" "cljs.reader" ":as" "reader"]
                          ["[]" "cljs.core.async" ":as" "a" ":refer" ["[]" ">!" "<!" "chan" "timeout"]]
                          ["[]" "recollect.patch" ":refer" ["[]" "patch-bunch"]]]],
                    :defs {"sender" ["defonce" "sender" ["chan"]],
                           "send!" ["defn" "send!" ["op" "op-data"] ["go" [">!" "sender" ["[]" "op" "op-data"]]]],
                           "setup-socket!" ["defn"
                                            "setup-socket!"
                                            ["*store" "configs"]
                                            ["let"
                                             [["ws-url" [":url" "configs"]]
                                              ["ws" ["js/WebSocket." "ws-url"]]
                                              ["handle-close!"
                                               ["if"
                                                ["fn?" [":on-close!" "configs"]]
                                                [":on-close!" "configs"]
                                                "identity"]]
                                              ["handle-open!"
                                               ["if" ["fn?" [":on-open!" "configs"]] [":on-open!" "configs"] "identity"]]]
                                             ["set!" "ws.onopen" ["fn" ["event"] ["handle-open!" "event"]]]
                                             ["set!" "ws.onclose" ["fn" ["event"] ["handle-close!" "event"]]]
                                             ["set!"
                                              "ws.onmessage"
                                              ["fn"
                                               ["event"]
                                               ["let"
                                                [["changes" ["reader/read-string" "event.data"]]]
                                                [".log" "js/console" "|Changes" ["clj->js" "changes"]]
                                                ["reset!" "*store" ["patch-bunch" "@*store" "changes"]]]]]
                                             ["go" ["loop" ["[]"] [".send" "ws" ["pr-str" ["<!" "sender"]]] ["recur"]]]]]},
                    :procs []},
         "comp.login" {:ns ["ns"
                            "app.comp.login"
                            [":require-macros"
                             ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "div" "input" "button" "span"]]]
                            [":require"
                             ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                             ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                             ["[]" "respo.comp.inspect" ":refer" ["[]" "comp-inspect"]]
                             ["[]" "respo-ui.style" ":as" "ui"]
                             ["[]" "app.schema" ":as" "schema"]]],
                       :defs {"on-submit" ["defn"
                                           "on-submit"
                                           ["username" "password" "signup?"]
                                           ["fn"
                                            ["e" "dispatch!"]
                                            ["dispatch!"
                                             ["if" "signup?" ":user/sign-up" ":user/log-in"]
                                             ["[]" "username" "password"]]
                                            [".setItem"
                                             "js/localStorage"
                                             [":storage-key" "schema/configs"]
                                             ["[]" "username" "password"]]]],
                              "on-input" ["defn"
                                          "on-input"
                                          ["state" "k"]
                                          ["fn"
                                           ["e" "dispatch!" "mutate!"]
                                           ["mutate!" ["assoc" "state" "k" [":value" "e"]]]]],
                              "comp-login" ["defcomp"
                                            "comp-login"
                                            ["states"]
                                            ["let"
                                             [["state" ["or" [":data" "states"] "initial-state"]]]
                                             ["div"
                                              ["{}"]
                                              ["div"
                                               ["{}" [":style" ["{}"]]]
                                               ["div"
                                                ["{}"]
                                                ["input"
                                                 ["{}"
                                                  [":placeholder" "|Username"]
                                                  [":value" [":username" "state"]]
                                                  [":style" "ui/input"]
                                                  [":on" ["{}" [":input" ["on-input" "state" ":username"]]]]]]]
                                               ["=<" "nil" "8"]
                                               ["div"
                                                ["{}"]
                                                ["input"
                                                 ["{}"
                                                  [":placeholder" "|Password"]
                                                  [":value" [":password" "state"]]
                                                  [":style" "ui/input"]
                                                  [":on" ["{}" [":input" ["on-input" "state" ":password"]]]]]]]]
                                              ["=<" "nil" "8"]
                                              ["div"
                                               ["{}" [":style" "ui/flex"]]
                                               ["button"
                                                ["{}"
                                                 [":inner-text" "|Sign up"]
                                                 [":style"
                                                  ["merge" "ui/button" ["{}" [":outline" ":none"] [":border" ":none"]]]]
                                                 [":on"
                                                  ["{}"
                                                   [":click"
                                                    ["on-submit" [":username" "state"] [":password" "state"] "true"]]]]]]
                                               ["=<" "8" "nil"]
                                               ["button"
                                                ["{}"
                                                 [":inner-text" "|Sign in"]
                                                 [":style"
                                                  ["merge" "ui/button" ["{}" [":outline" ":none"] [":border" ":none"]]]]
                                                 [":on"
                                                  ["{}"
                                                   [":click"
                                                    ["on-submit" [":username" "state"] [":password" "state"] "false"]]]]]]]]]],
                              "initial-state" ["def" "initial-state" ["{}" [":username" "|"] [":password" "|"]]]},
                       :procs []},
         "render" {:ns ["ns"
                        "app.render"
                        [":require"
                         ["[]" "respo.render.html" ":refer" ["[]" "make-string"]]
                         ["[]" "shell-page.core" ":refer" ["[]" "make-page" "spit" "slurp"]]
                         ["[]" "app.comp.container" ":refer" ["[]" "comp-container"]]]],
                   :defs {"main!" ["defn"
                                   "main!"
                                   []
                                   ["if"
                                    ["=" "js/process.env.env" "|dev"]
                                    ["spit" "|target/index.html" ["dev-page"]]
                                    ["spit" "|dist/index.html" ["prod-page"]]]],
                          "base-info" ["def"
                                       "base-info"
                                       ["{}"
                                        [":title" "|Cumulo"]
                                        [":icon" "|http://logo.cumulo.org/cumulo.png"]
                                        [":ssr" "nil"]
                                        [":inner-html" "nil"]]],
                          "dev-page" ["defn"
                                      "dev-page"
                                      []
                                      ["make-page"
                                       "|"
                                       ["merge"
                                        "base-info"
                                        ["{}"
                                         [":styles" ["[]"]]
                                         [":scripts" ["[]" "|/main.js" "|/browser/lib.js" "|/browser/main.js"]]]]]],
                          "prod-page" ["defn"
                                       "prod-page"
                                       []
                                       ["let"
                                        [["html-content" ["make-string" ["comp-container" ["{}"] "nil"]]]
                                         ["manifest" [".parse" "js/JSON" ["slurp" "|dist/assets-manifest.json"]]]
                                         ["cljs-manifest" [".parse" "js/JSON" ["slurp" "|dist/manifest.json"]]]]
                                        ["make-page"
                                         "html-content"
                                         ["merge"
                                          "base-info"
                                          ["{}"
                                           [":styles" ["[]" ["aget" "manifest" "|main.css"]]]
                                           [":scripts"
                                            ["[]"
                                             ["aget" "manifest" "|main.js"]
                                             ["->" "cljs-manifest" ["aget" "0"] ["aget" "|js-name"]]
                                             ["->" "cljs-manifest" ["aget" "1"] ["aget" "|js-name"]]]]]]]]]},
                   :procs []},
         "comp.header" {:ns ["ns"
                             "app.comp.header"
                             [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div"]]]
                             [":require"
                              ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                              ["[]" "respo-ui.style" ":as" "ui"]
                              ["[]" "respo-ui.style.colors" ":as" "colors"]
                              ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                              ["[]" "app.style.layout" ":as" "layout"]]],
                        :defs {"on-profile" ["defn"
                                             "on-profile"
                                             ["e" "dispatch!"]
                                             ["dispatch!"
                                              ":router/change"
                                              ["{}" [":name" ":profile"] [":params" "nil"] [":router" "nil"]]]],
                               "comp-header" ["defcomp"
                                              "comp-header"
                                              ["logged-in?"]
                                              ["div"
                                               ["{}" [":style" "style-header"]]
                                               ["div"
                                                ["{}"
                                                 [":on" ["{}" [":click" "on-home"]]]
                                                 [":style"
                                                  ["merge" [":logo" "layout/header"] ["{}" [":cursor" ":pointer"]]]]]
                                                ["<>" "span" "|Cumulo" "nil"]]
                                               ["div"
                                                ["{}"
                                                 [":on" ["{}" [":click" "on-preview"]]]
                                                 [":style"
                                                  ["merge" [":logo" "layout/editor"] ["{}" [":cursor" ":pointer"]]]]]
                                                ["<>" "span" "|Preview" "nil"]]
                                               ["div"
                                                ["{}"
                                                 [":style" ["merge" [":profile" "layout/header"] "style-pointer"]]
                                                 [":on" ["{}" [":click" "on-profile"]]]]
                                                ["<>" "span" ["if" "logged-in?" "|Me" "|Guest"] "nil"]]]],
                               "style-pointer" ["def" "style-pointer" ["{}" [":cursor" "|pointer"]]],
                               "style-header" ["def"
                                               "style-header"
                                               ["merge"
                                                [":header" "layout/workspace"]
                                                [":grid" "layout/header"]
                                                ["{}"
                                                 [":height" "48"]
                                                 [":background-color" "colors/motif"]
                                                 [":padding" "|0 16px"]
                                                 [":font-size" "16"]
                                                 [":color" ":white"]]]],
                               "on-home" ["defn"
                                          "on-home"
                                          ["e" "d!" "m!"]
                                          ["d!"
                                           ":router/change"
                                           ["{}" [":name" ":home"] [":data" "nil"] [":router" "nil"]]]],
                               "on-preview" ["defn"
                                             "on-preview"
                                             ["e" "d!" "m!"]
                                             ["d!"
                                              ":router/change"
                                              ["{}" [":name" ":preview"] [":data" "nil"] [":router" "nil"]]]]},
                        :procs []},
         "comp.tree-panel" {:ns ["ns"
                                 "app.comp.tree-panel"
                                 [":require-macros"
                                  ["[]"
                                   "respo.macros"
                                   ":refer"
                                   ["[]" "defcomp" "<>" "span" "code" "div" "a" "button" "input"]]]
                                 [":require"
                                  ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                  ["[]" "respo-ui.style" ":as" "ui"]
                                  ["[]" "respo-ui.style.colors" ":as" "colors"]
                                  ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                  ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                                  ["[]" "app.style.layout" ":as" "layout"]
                                  ["[]" "app.style" ":as" "style"]
                                  ["[]" "app.comp.tree" ":refer" ["[]" "comp-tree"]]]],
                            :defs {"comp-tree-panel" ["defcomp"
                                                      "comp-tree-panel"
                                                      ["states" "dom-modules" "focus"]
                                                      ["let"
                                                       [["state" ["or" [":data" "states"] "|"]]
                                                        ["tree-node" ["get" "dom-modules" [":module" "focus"]]]
                                                        ["path" [":path" "focus"]]]
                                                       ["div"
                                                        ["{}"
                                                         [":style" ["merge" [":tree" "layout/editor"] "style-panel"]]]
                                                        ["div" ["{}"] ["<>" "code" "path" "nil"]]
                                                        ["div"
                                                         ["{}"]
                                                         ["input"
                                                          ["{}"
                                                           [":placeholder" "|element"]
                                                           [":value" "state"]
                                                           [":style" "ui/input"]
                                                           [":on" ["{}" [":input" "on-input"]]]]]
                                                         ["=<" "8" "nil"]
                                                         ["button"
                                                          ["{}"
                                                           [":inner-text" "|Append"]
                                                           [":style" "ui/button"]
                                                           [":on" ["{}" [":click" ["on-append" "state"]]]]]]
                                                         ["=<" "8" "nil"]
                                                         ["button"
                                                          ["{}"
                                                           [":inner-text" "|Rename"]
                                                           [":style" "ui/button"]
                                                           [":on" ["{}" [":click" ["on-rename" "state"]]]]]]
                                                         ["=<" "8" "nil"]
                                                         ["button"
                                                          ["{}"
                                                           [":inner-text" "|Delete"]
                                                           [":style" "ui/button"]
                                                           [":on" ["{}" [":click" ["on-delete" "path"]]]]]]]
                                                        ["=<" "nil" "16"]
                                                        ["if"
                                                         ["some?" "tree-node"]
                                                         ["comp-tree" "tree-node" ["[]" [":id" "tree-node"]] "path"]]]]],
                                   "style-panel" ["def" "style-panel" ["{}" [":overflow" ":auto"]]],
                                   "on-delete" ["defn"
                                                "on-delete"
                                                ["path"]
                                                ["fn" ["e" "d!" "m!"] ["d!" ":dom-modules/delete-element" "path"]]],
                                   "on-append" ["defn"
                                                "on-append"
                                                ["path"]
                                                ["fn" ["e" "d!" "m!"] ["d!" ":dom-modules/append-element" "path"]]],
                                   "on-input" ["defn" "on-input" ["e" "d!" "m!"] ["m!" [":value" "e"]]],
                                   "on-rename" ["defn"
                                                "on-rename"
                                                ["text"]
                                                ["fn" ["e" "d!" "m!"] ["d!" ":dom-modules/rename-element" "text"]]]},
                            :procs []},
         "comp.style" {:ns ["ns"
                            "app.comp.style"
                            [":require-macros"
                             ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div" "a" "input"]]]
                            [":require"
                             ["[]" "clojure.string" ":as" "string"]
                             ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                             ["[]" "respo-ui.style" ":as" "ui"]
                             ["[]" "respo-ui.style.colors" ":as" "colors"]
                             ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                             ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                             ["[]" "app.style.layout" ":as" "layout"]]],
                       :defs {"comp-style" ["defcomp"
                                            "comp-style"
                                            ["states" "style-map" "path"]
                                            ["let"
                                             [["state" ["or" [":data" "states"] "|"]]]
                                             ["div"
                                              ["{}" [":style" [":style" "layout/editor"]]]
                                              ["div"
                                               ["{}"]
                                               ["->>"
                                                "style-map"
                                                ["map"
                                                 ["fn"
                                                  ["entry"]
                                                  ["let"
                                                   [[["[]" "k" "v"] "entry"]]
                                                   ["[]"
                                                    "k"
                                                    ["div"
                                                     ["{}"]
                                                     ["<>" "span" ["str" ["name" "k"] "|:"] "nil"]
                                                     ["=<" "8" "nil"]
                                                     ["<>" "span" "v" "nil"]]]]]]]]
                                              ["div"
                                               ["{}"]
                                               ["input"
                                                ["{}"
                                                 [":value" "state"]
                                                 [":placeholder" "|key: value"]
                                                 [":style" "ui/input"]
                                                 [":on"
                                                  ["{}" [":input" "on-input"] [":keydown" ["on-keydown" "state"]]]]]]]]]],
                              "on-input" ["defn" "on-input" ["e" "d!" "m!"] ["m!" [":value" "e"]]],
                              "on-keydown" ["defn"
                                            "on-keydown"
                                            ["text"]
                                            ["fn"
                                             ["e" "d!" "m!"]
                                             ["let"
                                              [[["[]" "k" "v"]
                                                ["map" "string/trim" ["string/split" "text" ["re-pattern" "|:\\s?"]]]]]
                                              ["if"
                                               ["and" ["=" "13" [":key-code" "e"]] ["not" ["string/blank?" "k"]]]
                                               ["do"
                                                ["d!"
                                                 ":dom-modules/set-style"
                                                 ["{}"
                                                  [":prop" ["keyword" "k"]]
                                                  [":value" ["if" ["string/blank?" "v"] "nil" "v"]]]]
                                                ["m!" "|"]]]]]]},
                       :procs []},
         "comp.dom-modules" {:ns ["ns"
                                  "app.comp.dom-modules"
                                  [":require-macros"
                                   ["[]"
                                    "respo.macros"
                                    ":refer"
                                    ["[]" "defcomp" "<>" "span" "div" "a" "input" "button"]]]
                                  [":require"
                                   ["[]" "clojure.string" ":as" "string"]
                                   ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                   ["[]" "respo-ui.style" ":as" "ui"]
                                   ["[]" "respo-ui.style.colors" ":as" "colors"]
                                   ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                   ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                                   ["[]" "app.style.layout" ":as" "layout"]]],
                             :defs {"style-insert" ["def"
                                                    "style-insert"
                                                    ["{}"
                                                     [":text-decoration" ":underline"]
                                                     [":font-size" "12"]
                                                     [":vertical-align" ":middle"]
                                                     [":color" ["hsl" "240" "50" "70"]]
                                                     [":cursor" ":pointer"]]],
                                    "on-input" ["defn" "on-input" ["e" "d!" "m!"] ["m!" [":value" "e"]]],
                                    "on-choose" ["defn"
                                                 "on-choose"
                                                 ["module-id"]
                                                 ["fn" ["e" "d!" "m!"] ["d!" ":dom-modules/choose" "module-id"]]],
                                    "on-insert" ["defn"
                                                 "on-insert"
                                                 ["module-id"]
                                                 ["fn" ["e" "d!" "m!"] ["d!" ":dom-modules/insert-module" "module-id"]]],
                                    "comp-dom-modules" ["defcomp"
                                                        "comp-dom-modules"
                                                        ["states" "dom-modules" "focus"]
                                                        ["let"
                                                         [["state" ["or" [":data" "states"] "|"]]]
                                                         ["div"
                                                          ["{}"
                                                           [":style"
                                                            ["merge"
                                                             [":grid" "layout/modules-panel"]
                                                             [":modules" "layout/editor"]]]]
                                                          ["div"
                                                           ["{}"
                                                            [":style"
                                                             ["merge" [":list" "layout/modules-panel"] "style-list"]]]
                                                           ["->>"
                                                            "dom-modules"
                                                            ["map"
                                                             ["fn"
                                                              ["entry"]
                                                              ["let"
                                                               [[["[]" "k" "m"] "entry"]]
                                                               ["[]"
                                                                "k"
                                                                ["div"
                                                                 ["{}"
                                                                  [":style"
                                                                   ["merge"
                                                                    "style-entry"
                                                                    ["if"
                                                                     ["=" "k" [":module" "focus"]]
                                                                     "style-highlight"]]]
                                                                  [":on" ["{}" [":click" ["on-choose" [":id" "m"]]]]]]
                                                                 ["<>" "span" [":name" "m"] "nil"]
                                                                 ["=<" "8" "nil"]
                                                                 ["span"
                                                                  ["{}"
                                                                   [":inner-text" "|insert"]
                                                                   [":style" "style-insert"]
                                                                   [":on" ["{}" [":click" ["on-insert" "k"]]]]]]]]]]]]]
                                                          ["div"
                                                           ["{}" [":style" [":control" "layout/modules-panel"]]]
                                                           ["div"
                                                            ["{}"]
                                                            ["input"
                                                             ["{}"
                                                              [":value" "state"]
                                                              [":placeholder" "|module name"]
                                                              [":style" "ui/input"]
                                                              [":on" ["{}" [":input" "on-input"]]]]]]
                                                           ["div"
                                                            ["{}"]
                                                            ["button"
                                                             ["{}"
                                                              [":inner-text" "|Create module"]
                                                              [":style" "ui/button"]
                                                              [":on" ["{}" [":click" ["on-create" "state"]]]]]]
                                                            ["=<" "8" "nil"]
                                                            ["button"
                                                             ["{}"
                                                              [":inner-text" "|Rename module"]
                                                              [":style" "ui/button"]]]
                                                            ["=<" "8" "nil"]
                                                            ["button"
                                                             ["{}"
                                                              [":inner-text" "|Delete"]
                                                              [":style" "ui/button"]
                                                              [":on" ["{}" [":click" "on-delete"]]]]]]]]]],
                                    "style-list" ["def"
                                                  "style-list"
                                                  ["{}"
                                                   [":background-color" ["hsl" "0" "0" "90"]]
                                                   [":overflow" ":auto"]]],
                                    "style-highlight" ["def" "style-highlight" ["{}" [":font-weight" ":bold"]]],
                                    "on-delete" ["defn"
                                                 "on-delete"
                                                 ["e" "d!" "m!"]
                                                 ["d!" ":dom-modules/delete-module" "nil"]],
                                    "style-entry" ["def"
                                                   "style-entry"
                                                   ["{}" [":padding" "|0 8px"] [":cursor" ":pointer"]]],
                                    "on-create" ["defn"
                                                 "on-create"
                                                 ["text"]
                                                 ["fn"
                                                  ["e" "d!" "m!"]
                                                  ["if"
                                                   ["not" ["string/blank?" "text"]]
                                                   ["do" ["d!" ":dom-modules/create" "text"] ["m!" "|"]]]]]},
                             :procs []},
         "style.layout" {:ns ["ns" "app.style.layout"],
                         :defs {"workspace" ["def"
                                             "workspace"
                                             ["{}"
                                              [":grid"
                                               ["{}"
                                                [":display" "|grid"]
                                                [":grid-template-rows" "|60px 1fr"]
                                                [":grid-template-columns" "|1fr"]
                                                [":justify-items" ":stretch"]
                                                [":align-items" ":stretch"]]]
                                              [":header" ["{}" [":grid-area" "|1/1"]]]
                                              [":body" ["{}" [":grid-area" "2/1"]]]]],
                                "header" ["def"
                                          "header"
                                          ["{}"
                                           [":grid"
                                            ["{}"
                                             [":display" ":grid"]
                                             [":grid-template-rows" "|1fr"]
                                             [":grid-template-columns" "|80px 80px 1fr 80px"]
                                             [":grid-gap" "|8px"]
                                             [":align-items" ":center"]
                                             [":justify-items" ":center"]]]
                                           [":logo" ["{}" [":grid-area" "|1/1"]]]
                                           [":editor" ["{}" [":grid-area" "|1/2"]]]
                                           [":profile" ["{}" [":grid-area" "|1/4"]]]]],
                                "editor" ["def"
                                          "editor"
                                          ["{}"
                                           [":grid"
                                            ["{}"
                                             [":display" ":grid"]
                                             [":grid-template-columns" "|repeat(6,1fr)"]
                                             [":grid-template-rows" "|repeat(2,1fr)"]
                                             [":grid-gap" "|8px"]
                                             [":justify-items" ":stretch"]
                                             [":align-items" ":stretch"]]]
                                           [":modules" ["{}" [":grid-area" "|1/1/span 2/span 1"]]]
                                           [":tree" ["{}" [":grid-area" "|1/2/span 2/span 2"]]]
                                           [":props" ["{}" [":grid-area" "|1/5/span 1/span 2"]]]
                                           [":style" ["{}" [":grid-area" "|2/5/span 1/span 2"]]]]],
                                "modules-panel" ["def"
                                                 "modules-panel"
                                                 ["{}"
                                                  [":grid"
                                                   ["{}"
                                                    [":display" ":grid"]
                                                    [":justify-items" ":stretch"]
                                                    [":align-items" ":stretch"]
                                                    [":grid-template-rows" "|1fr 1fr"]
                                                    [":grid-template-columns" "|1fr"]
                                                    [":grid-gap" "|8px"]]]
                                                  [":list" ["{}" [":grid-area" "|1/1"]]]
                                                  [":control" ["{}" [":grid-area" "|2/1"]]]]]},
                         :procs []}}}
